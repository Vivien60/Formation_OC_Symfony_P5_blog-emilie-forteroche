name: Claude Commit Review
on:
  workflow_call:
    inputs:
      commit-range:
        required: true
        type: string
        description: "Commit range to analyze (e.g., 924da9c53..HEAD or abc123..def456)"
      trigger-phrase:
        required: false
        type: string
        default: '@claude-review'
        description: "Trigger phrase for reviews"
      max-files:
        required: false
        type: number
        default: 50
        description: "Maximum number of files to review"
      use-milchick-voice:
        required: false
        type: boolean
        default: false
        description: "If true, instructs the reviewer to use the voice of Seth Milchick from Severance."
    secrets:
      github-token:
        required: true
        description: "GitHub token with repo access"
      anthropic-api-key:
        required: true
        description: "Anthropic API key"

permissions:
  contents: read
  actions: write

jobs:
  claude-review:
    name: Claude Commit Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code
        shell: bash
        run: |
          npm install -g @anthropic-ai/claude-code@0.2.74
          echo "Claude Code installed successfully"

      - name: Create review directories
        shell: bash
        run: |
          mkdir -p .claude-review/commit-info

      - name: Extract commit information
        shell: bash
        run: |
          COMMIT_RANGE="${{ inputs.commit-range }}"
          FIRST_COMMIT=$(echo $COMMIT_RANGE | cut -d'.' -f1)
          LAST_COMMIT=$(echo $COMMIT_RANGE | cut -d'.' -f4)
          
          # Handle single commit case
          if [[ "$COMMIT_RANGE" != *".."* ]]; then
            FIRST_COMMIT="$COMMIT_RANGE~1"
            LAST_COMMIT="$COMMIT_RANGE"
          fi
          
          echo "COMMIT_RANGE=$COMMIT_RANGE" >> $GITHUB_ENV
          echo "FIRST_COMMIT=$FIRST_COMMIT" >> $GITHUB_ENV  
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=${{ secrets.anthropic-api-key }}" >> $GITHUB_ENV
          
          echo "Analyzing commits from $FIRST_COMMIT to $LAST_COMMIT"

      - name: Generate diff and prepare for review
        shell: bash
        run: |
          # Generate the diff for the commit range
          git diff ${{ env.FIRST_COMMIT }}..${{ env.LAST_COMMIT }} > .claude-review/commit-changes.diff
          
          # List changed files
          git diff --name-only ${{ env.FIRST_COMMIT }}..${{ env.LAST_COMMIT }} > .claude-review/changed-files.txt
          
          # Get commit messages and details
          git log --oneline ${{ env.FIRST_COMMIT }}..${{ env.LAST_COMMIT }} > .claude-review/commit-messages.txt
          git log --stat ${{ env.FIRST_COMMIT }}..${{ env.LAST_COMMIT }} > .claude-review/commit-details.txt
          
          # Get the total number of changed files
          TOTAL_FILES=$(wc -l < .claude-review/changed-files.txt | tr -d ' ')
          
          # Limit to max files if needed
          if [ "$TOTAL_FILES" -gt "${{ inputs.max-files }}" ]; then
            head -n ${{ inputs.max-files }} .claude-review/changed-files.txt > .claude-review/files-to-review.txt
            echo "Reviewing first ${{ inputs.max-files }} files out of $TOTAL_FILES changed files"
          else
            cp .claude-review/changed-files.txt .claude-review/files-to-review.txt
            echo "Reviewing all $TOTAL_FILES changed files"
          fi
          
          # For each file to review, get its content
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              mkdir -p ".claude-review/$(dirname "$file")"
              cp "$file" ".claude-review/$file"
            fi
          done < .claude-review/files-to-review.txt

      - name: Run Claude Code Review
        shell: bash
        id: claude-review
        run: |
          # Create review prompt file
          cat > .claude-review/prompt.md << 'EOF'
          # Commit Range Review Task

          Vous √™tes un expert en r√©vision de code examinant une s√©rie de commits selon les directives de CLAUDE.md. 
          Effectuez une r√©vision approfondie en analysant :

          1. Les changements de code (diff) pour identifier :
             - Bugs, erreurs logiques ou probl√®mes potentiels
             - Vuln√©rabilit√©s de s√©curit√©
             - Probl√®mes de performance
             - Adh√©rence aux bonnes pratiques et standards de codage
             - Compl√©tude relative aux sp√©cifications
             - Couverture et qualit√© des tests
          2. Fournir des retours constructifs avec des recommandations sp√©cifiques

          ## Informations des Commits
          - Plage de commits : $COMMIT_RANGE
          - Premier commit : $FIRST_COMMIT
          - Dernier commit : $LAST_COMMIT

          ## Directives
          - Soyez approfondi mais concis
          - Mettez en avant les probl√®mes ET les aspects positifs
          - Priorisez les retours (probl√®mes critiques en premier)
          - Fournissez des exemples sp√©cifiques et des solutions quand possible
          - Consid√©rez le contexte des changements et leur objectif
          - Concentrez-vous sur le fond plut√¥t que la forme quand possible

          ## Format de sortie final
          Fournissez votre r√©vision en format markdown avec ces sections :
          1. **Summary** - √âvaluation globale et points cl√©s
          2. **Recommendations** - Liste prioris√©e des changements sugg√©r√©s
          3. **Detailed Review** - Organis√© par fichier/composant avec r√©f√©rences de lignes sp√©cifiques
          4. **Questions** - Clarifications n√©cessaires de l'auteur

          Restez constructif et professionnel.
          EOF

          # Conditionally add Milchick voice instruction
          if [ "${{ inputs.use-milchick-voice }}" = "true" ]; then
            echo "" >> .claude-review/prompt.md # Add a newline for separation
            echo "Additionally, adopt the persona and voice of Seth Milchick from the TV show Severance for this review. Maintain his characteristic tone and mannerisms throughout your response." >> .claude-review/prompt.md
            echo "Milchick voice enabled."
          else
             echo "Standard professional voice enabled."
          fi

          # Replace environment variables in the prompt
          envsubst < .claude-review/prompt.md > .claude-review/prompt-filled.md
          
          # Run Claude Code in non-interactive mode
          echo "Starting Claude Code review process..."

          cd .claude-review && claude -p \
            "read prompt-filled.md, then analyze the commit information in commit-messages.txt and commit-details.txt, and the code changes in commit-changes.diff. \
            Examine each file listed in files-to-review.txt. \
            Provide a comprehensive code review as specified in the prompt following CLAUDE.md guidelines." > review-output.md
          
          echo "Claude Code review completed"

      - name: Output review results
        shell: bash
        run: |
          echo "üîç **Claude Commit Review completed**"
          echo ""
          echo "## Review Results:"
          echo ""
          cat .claude-review/review-output.md
          echo ""
          echo "<sub>This review was automatically generated by Claude Code.</sub>"